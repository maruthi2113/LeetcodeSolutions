class Solution {
    public int ans=0;
    public boolean visited[];
    public int minReorder(int n, int[][] connections) {
        List<List<Integer>> graph= new ArrayList<>();

        for(int i=0;i<n;i++)
        graph.add(new ArrayList<Integer>());
       
        for(int i=0;i<n-1;i++)
        {
            int start=connections[i][0];
            int end=connections[i][1];
            graph.get(start).add(end);
            graph.get(end).add(-start);
        }
        visited=new boolean[n];
        dfs(0,graph);
        return ans;
    }

    public void dfs(int node,List<List<Integer>> graph){
         visited[node]=true;
         for(int i:graph.get(node))
         {
             if(!visited[Math.abs(i)])
             {
                 if(i>0)
                 ans++;
                 dfs(Math.abs(i),graph);
             }
         }
    }
}
